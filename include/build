
ifndef current-build-folder

# --------------------
.PHONY: build pre-build
# --------------------

build:: pre-build
	$(info - build --------------------------------)
	$(if $(verbose),@echo create .... source/header)
	@npx shx mkdir -p release/header
	$(if $(verbose),@echo build ..... source/header)
	@$(MAKE) $(if $(job-count),--jobs=$(job-count),--jobs) --no-print-directory build current-build-folder=source/header
	$(if $(verbose),@echo create .... source)
	@npx shx mkdir -p release
	$(if $(verbose),@echo build ..... source)
	@$(MAKE) $(if $(job-count),--jobs=$(job-count),--jobs) --no-print-directory build current-build-folder=source exclude-build-folder=source/header

pre-build:: ;

else

ifndef filter-make-folder
filter-make-folder = $(1)
endif

make-folder = $(call $\
								filter-make-folder,$\
								$(strip $\
									$(foreach $\
										item,$\
										$(filter-out $\
											$(exclude-build-folder),$\
											$(call get-content,$(current-build-folder))),$\
										$(if $\
											$(call get-content,$(item)),$\
											$(if $\
												$(wildcard $(item)/makefile),$\
												$(item))))))

ifndef filter-build-folder
filter-build-folder = $(1)
endif

build-folder = $(call $\
								filter-build-folder,$\
								$(strip $\
									$(foreach $\
										item,$\
										$(filter-out $\
											$(exclude-build-folder),$\
											$(call get-content,$(current-build-folder))),$\
										$(if $\
											$(call get-content,$(item)),$\
											$(if $\
												$(wildcard $(item)/makefile),,$\
												$(item))))))

ifndef filter-build-item
filter-build-item = $(1)
endif

build-item = $(call $\
							filter-build-item,$\
							$(strip $\
								$(foreach $\
									item,$\
									$(call get-content,$(current-build-folder)),$\
									$(patsubst $\
										source/%,$\
										release/%,$\
										$(if $\
											$(call get-content,$(item)),,$\
											$(item))))))

# --------------------
.PHONY: build copy ignore
# --------------------

# $(info ----------)
# $(info current-build-folder ... $(current-build-folder))
# $(info exclude-build-folder ... $(exclude-build-folder))
# $(info make-folder ............ $(make-folder))
# $(info build-folder ........... $(build-folder))
# $(info build-item ............. $(build-item))
# $(info ----------)

build:: $(addsuffix .make,$(make-folder)) $(addsuffix .build,$(build-folder)) $(build-item)
	@:

source/%.make:
	$(if $(verbose),@echo make ...... $(patsubst %.make,%,$@))
	@$(MAKE) --makefile=$(patsubst %.make,%,$@)/makefile --no-print-directory current-build-folder=$(patsubst %.make,%,$@)

source/%.build: release/%.create
	$(if $(verbose),@echo build ..... $(patsubst %.build,%,$@))
	@$(MAKE) --no-print-directory build current-build-folder=$(patsubst %.build,%,$@) 

release/%.create:
	$(if $(verbose),@echo create .... $(patsubst %.create,%,$@))
	@npx shx mkdir -p $(patsubst %.create,%,$@)

release/.DS_Store: source/.DS_Store
	$(if $(verbose),@echo ignore .... $<)
release/%/.DS_Store: source/%/.DS_Store
	$(if $(verbose),@echo ignore .... $<)
release/.babelrc.json: source/.babelrc.json
	$(if $(verbose),@echo ignore .... $<)
release/%/.babelrc.json: source/%/.babelrc.json
	$(if $(verbose),@echo ignore .... $<)
release/.eslintrc.json: source/.eslintrc.json
	$(if $(verbose),@echo ignore .... $<)
release/%/.eslintrc.json: source/%/.eslintrc.json
	$(if $(verbose),@echo ignore .... $<)

release/%.cjs: source/%.cjs
	$(eval export SOURCE_PATH := $<)
	$(eval export RELEASE_PATH := $@)
	@echo check ..... $< $(eslint-parameter)
	@npx eslint $< $(eslint-parameter)
	@echo compile ... $@ --source-maps $(or $(source-map),true) $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

release/%.js: source/%.js
	$(eval export SOURCE_PATH := $<)
	$(eval export RELEASE_PATH := $@)
	@echo check ..... $< $(eslint-parameter)
	@npx eslint $< $(eslint-parameter)
	@echo compile ... $@ --source-maps $(or $(source-map),true) $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

release/%: source/%
	@echo copy ...... $@
	@npx shx cp -R $< $(call trim-folder-path,$@)

copy::
	$(if $(verbose),@echo copy ...... $(patsubst source/%,release/%,$(current-build-folder)))
	@npx shx cp -R $(current-build-folder) $(call trim-folder-path,$(patsubst source/%,release/%,$(current-build-folder)))
	$(if $(verbose),@echo delete .... $(patsubst source/%,release/%,$(current-build-folder))/makefile)
	@npx shx rm -f $(patsubst source/%,release/%,$(current-build-folder))/makefile

ignore::
	$(if $(verbose),@echo ignore .... $(current-build-folder))
	@:

endif