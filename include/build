
get-content = $(strip $\
								$(filter-out $\
									$(1)/. $\
									$(1)/..,$\
									$(patsubst $\
										./%,$\
										%,$\
										$(wildcard $(1)/.*) $\
										$(wildcard $(1)/*))))

trim-folder-path = $(patsubst $\
										%/,$\
										%,$\
										$(dir $\
											$(1)))

ifndef current-folder

.PHONY: pre-build build

# @npx shx echo build ..... source/header
# @npx shx echo build ..... source
pre-build:: ;
build:: pre-build
	@npx shx mkdir -p release/header
	@$(MAKE) --jobs=$(or $(job-count),4) build current-folder=source/header
	@npx shx mkdir -p release
	@$(MAKE) --jobs=$(or $(job-count),4) build current-folder=source

else

ifndef filter-make-folder
filter-make-folder = $(1)
endif

make-folder = $(call $\
								filter-make-folder,$\
								$(strip $\
									$(foreach $\
										item,$\
										$(call get-content,$(current-folder)),$\
										$(if $\
											$(call get-content,$(item)),$\
											$(if $\
												$(wildcard $(item)/makefile),$\
												$(item).make)))))

ifndef filter-build-folder
filter-build-folder = $(1)
endif

build-folder = $(call $\
								filter-build-folder,$\
								$(strip $\
									$(foreach $\
										item,$\
										$(call get-content,$(current-folder)),$\
										$(if $\
											$(call get-content,$(item)),$\
											$(if $\
												$(wildcard $(item)/makefile),,$\
												$(item).build)))))

ifndef filter-build-item
filter-build-item = $(1)
endif

build-item = $(call $\
							filter-build-item,$\
							$(strip $\
								$(foreach $\
									item,$\
									$(call get-content,$(current-folder)),$\
									$(patsubst $\
										source/%,$\
										release/%,$\
										$(if $\
											$(call get-content,$(item)),,$\
											$(item))))))

.PHONY: build copy ignore

# $(info --------------------)
# $(info current-folder ... $(current-folder))
# $(info make-folder ...... $(make-folder))
# $(info build-folder ..... $(build-folder))
# $(info build-item ....... $(build-item))
# $(info --------------------)

build:: $(make-folder) $(build-folder) $(build-item)
	@npx shx echo -n

# @npx shx echo make ...... $(patsubst %.make,%,$@)
source/%.make:
	@$(MAKE) --makefile=$(patsubst %.make,%,$@)/makefile current-folder=$(patsubst %.make,%,$@)

# @npx shx echo build ..... $(patsubst %.build,%,$@)
source/%.build: release/%.create
	@$(MAKE) build current-folder=$(patsubst %.build,%,$@) 

# @npx shx echo create .... $(patsubst %.create,%,$@)
release/%.create:
	@npx shx mkdir -p $(patsubst %.create,%,$@)

release/.DS_Store: source/.DS_Store;
release/%/.DS_Store: source/%/.DS_Store;
release/.babelrc.json: source/.babelrc.json;
release/%/.babelrc.json: source/%/.babelrc.json;
release/.eslintrc.json: source/.eslintrc.json;
release/%/.eslintrc.json: source/%/.eslintrc.json;

release/%.cjs: source/%.cjs
	$(eval export SOURCE_PATH := $<)
	$(eval export RELEASE_PATH := $@)
	@npx shx echo check ..... $< $(eslint-parameter)
	@npx eslint $< $(eslint-parameter)
	@npx shx echo compile ... $@ --source-maps $(or $(source-map),true) $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

release/%.js: source/%.js
	$(eval export SOURCE_PATH := $<)
	$(eval export RELEASE_PATH := $@)
	@npx shx echo check ..... $< $(eslint-parameter)
	@npx eslint $< $(eslint-parameter)
	@npx shx echo compile ... $@ --source-maps $(or $(source-map),true) $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

release/%: source/%
	@npx shx echo copy ...... $@
	@npx shx cp -R $< $(call trim-folder-path,$@)

# @npx shx echo copy ...... $(current-folder) to $(call trim-folder-path,$(patsubst source/%,release/%,$(current-folder)))
# @npx shx echo delete .... $(patsubst source/%,release/%,$(current-folder))/makefile
copy::
	@npx shx cp -R $(current-folder) $(call trim-folder-path,$(patsubst source/%,release/%,$(current-folder)))
	@npx shx rm -f $(patsubst source/%,release/%,$(current-folder))/makefile

# @npx shx echo ignore .... $(current-folder)
ignore::
	@npx shx echo -n 

endif