
get-content = $(strip $\
								$(filter-out $\
									$(1)/. $\
									$(1)/..,$\
									$(patsubst $\
										./%,$\
										%,$\
										$(wildcard $(1)/.*) $\
										$(wildcard $(1)/*))))

trim-folder-path = $(patsubst $\
										%/,$\
										%,$\
										$(dir $\
											$(1)))

ifndef current-folder

.PHONY: build

build:: release.create
	@npx shx echo build ..... source
	@$(MAKE) --jobs=$(or $(jobs),$(j),4) build current-folder=source

release.create:
	@npx shx echo create .... $(patsubst %.create,%,$@)
	@npx shx mkdir -p $(patsubst %.create,%,$@)

else

ifndef filter-make-folder
filter-make-folder = $(1)
endif

make-folder := $(call $\
								filter-make-folder,$\
								$(strip $\
									$(foreach $\
										item,$\
										$(call get-content,$(current-folder)),$\
										$(if $\
											$(call get-content,$(item)),$\
											$(if $\
												$(wildcard $(item)/makefile),$\
												$(item).make)))))

ifndef filter-build-folder
filter-build-folder = $(1)
endif

build-folder := $(call $\
									filter-build-folder,$\
									$(strip $\
										$(foreach $\
											item,$\
											$(call get-content,$(current-folder)),$\
											$(if $\
												$(call get-content,$(item)),$\
												$(if $\
													$(wildcard $(item)/makefile),,$\
													$(item).build)))))

ifndef filter-build-file
filter-build-file = $(1)
endif

build-file := $(call $\
								filter-build-file,$\
								$(strip $\
									$(foreach $\
										item,$\
										$(call get-content,$(current-folder)),$\
										$(patsubst $\
											source/%,$\
											release/%,$\
											$(if $\
												$(call get-content,$(item)),,$\
												$(item))))))

.PHONY: build copy ignore

# $(info --------------------)
# $(info current-folder ... $(current-folder))
# $(info make-folder ...... $(make-folder))
# $(info build-folder ..... $(build-folder))
# $(info build-file ....... $(build-file))
# $(info --------------------)

build:: $(make-folder) $(build-folder) $(build-file)
	@npx shx echo -n

source/%.make:
	@npx shx echo make ...... $(patsubst %.make,%,$@)
	@$(MAKE) --makefile=$(patsubst %.make,%,$@)/makefile current-folder=$(patsubst %.make,%,$@)

source/%.build: release/%.create
	@npx shx echo build ..... $(patsubst %.build,%,$@)
	@$(MAKE) build current-folder=$(patsubst %.build,%,$@) 

release/%.create:
	@npx shx echo create .... $(patsubst %.create,%,$@)
	@npx shx mkdir -p $(patsubst %.create,%,$@)

release/.DS_Store: source/.DS_Store;
release/%/.DS_Store: source/%/.DS_Store;
release/.babelrc.json: source/.babelrc.json;
release/%/.babelrc.json: source/%/.babelrc.json;
release/.eslintrc.json: source/.eslintrc.json;
release/%/.eslintrc.json: source/%/.eslintrc.json;

release/%.cjs: source/%.cjs
	@npx shx echo check ..... $< $(eslint-parameter)
	@npx eslint $< $(eslint-parameter)
	@npx shx echo compile ... $@ --source-maps $(or $(source-map),true) $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

release/%.js: source/%.js
	@npx shx echo check ..... $< $(eslint-parameter)
	@npx eslint $< $(eslint-parameter)
	@npx shx echo compile ... $@ --source-maps $(or $(source-map),true) $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

release/%: source/%
	@npx shx echo copy ...... $@
	@npx shx cp -R $< $(call trim-folder-path,$@)

copy::
	@npx shx echo copy ...... $(current-folder) to $(call trim-folder-path,$(patsubst source/%,release/%,$(current-folder)))
	@npx shx cp -R $(current-folder) $(call trim-folder-path,$(patsubst source/%,release/%,$(current-folder)))
	@npx shx echo delete .... $(patsubst source/%,release/%,$(current-folder))/makefile
	@npx shx rm -f $(patsubst source/%,release/%,$(current-folder))/makefile

ignore::
	@npx shx echo ignore .... $(current-folder)
	@npx shx echo -n 

endif