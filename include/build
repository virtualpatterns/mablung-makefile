
ifndef current-clean-folder
ifndef current-build-folder

# --------------------
.PHONY: build pre-build lint pre-lint
# --------------------

exclude-build-file += .DS_Store .babelrc.json .eslintrc.json

build:: pre-build lint build-0 build-1
	@:

pre-build:: ;

lint:: pre-lint
	$(info - lint ---------------------------------)
	@npx eslint --cache --cache-location data/cache/eslint.json $(eslint-parameter) source 

pre-lint:: ;

build-0::
	$(info - build --------------------------------)
	@npx babel --copy-files --extensions .cjs,.js --keep-file-extension --out-dir release --quiet --source-maps true $(babel-parameter) source

pre-build-0:: ;

build-1::
	$(if $(verbose),@echo create .... release)
	@npx shx mkdir -p source release
	$(if $(verbose),@echo build ..... source)
	@$(MAKE) $(if $(job-count),--jobs=$(job-count),--jobs) --no-print-directory build current-build-folder=source exclude-build-file="$(exclude-build-file)"

pre-build-1:: ;

else

make-folder = $(strip $\
								$(foreach $\
									item,$\
									$(filter-out $\
										$(exclude-build-folder),$\
										$(call get-content,$(current-build-folder))),$\
									$(if $\
										$(call get-content,$(item)),$\
										$(if $\
											$(wildcard $(item)/makefile),$\
											$(item)))))

build-folder = $(strip $\
								$(foreach $\
									item,$\
									$(filter-out $\
										$(exclude-build-folder),$\
										$(call get-content,$(current-build-folder))),$\
									$(if $\
										$(call get-content,$(item)),$\
										$(if $\
											$(wildcard $(item)/makefile),,$\
											$(item)))))

build-file = $(strip $\
							$(foreach $\
								item,$\
								$(filter-out $\
									$(addprefix $\
										$(current-build-folder)/,$\
										$(exclude-build-file)),$\
									$(call get-content,$(current-build-folder))),$\
								$(patsubst $\
									source/%,$\
									release/%,$\
									$(if $\
										$(call get-content,$(item)),,$\
										$(item)))))

# --------------------
.PHONY: build copy ignore
# --------------------

# $(info ----------)
# $(info current-build-folder ... $(current-build-folder))
# $(info exclude-build-folder ... $(exclude-build-folder))
# $(info exclude-build-file ..... $(exclude-build-file))
# $(info make-folder ............ $(make-folder))
# $(info build-folder ........... $(build-folder))
# $(info build-file ............. $(build-file))
# $(info ----------)

build:: $(addsuffix .make,$(make-folder)) $(addsuffix .build,$(build-folder)) $(build-file)
	@:

source/%.make:
	$(if $(verbose),@echo make ...... $(patsubst %.make,%,$@))
	@$(MAKE) --makefile=$(patsubst %.make,%,$@)/makefile --no-print-directory current-build-folder=$(patsubst %.make,%,$@) exclude-build-file="$(exclude-build-file)"

source/%.build: release/%.create
	$(if $(verbose),@echo build ..... $(patsubst %.build,%,$@))
	@$(MAKE) --no-print-directory build current-build-folder=$(patsubst %.build,%,$@) exclude-build-file="$(exclude-build-file)"

release/%.create:
	$(if $(verbose),@echo create .... $(patsubst %.create,%,$@))
	@npx shx mkdir -p $(patsubst %.create,%,$@)

# release/.DS_Store: source/.DS_Store
# 	$(if $(verbose),@echo ignore .... $<)
# release/%/.DS_Store: source/%/.DS_Store
# 	$(if $(verbose),@echo ignore .... $<)
# release/.babelrc.json: source/.babelrc.json
# 	$(if $(verbose),@echo ignore .... $<)
# release/%/.babelrc.json: source/%/.babelrc.json
# 	$(if $(verbose),@echo ignore .... $<)
# release/.eslintrc.json: source/.eslintrc.json
# 	$(if $(verbose),@echo ignore .... $<)
# release/%/.eslintrc.json: source/%/.eslintrc.json
# 	$(if $(verbose),@echo ignore .... $<)

# $(foreach	item,\
# 	.DS_Store .babelrc.json .eslintrc.json,\
# 	$(eval release/$(item):source/$(item);$(if $(verbose),@echo ignore .... $$<)))

# $(foreach	item,\
# 	.DS_Store .babelrc.json .eslintrc.json,\
# 	$(eval release/%/$(item):source/%/$(item);$(if $(verbose),@echo ignore .... $$<)))

release/%.cjs: source/%.cjs
	@echo compile ... $@ $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps true $(babel-parameter)

release/%.js: source/%.js
	@echo compile ... $@ $(babel-parameter)
	@npx babel $< --out-file $@ --source-maps true $(babel-parameter)

release/%: source/%
	@echo copy ...... $@
	@npx shx cp -R $< $(call trim-folder-path,$@)

copy::
	$(if $(verbose),@echo copy ...... $(patsubst source/%,release/%,$(current-build-folder)))
	@npx shx rm -Rf $(patsubst source/%,release/%,$(current-build-folder))
	@npx shx cp -R $(current-build-folder) $(call trim-folder-path,$(patsubst source/%,release/%,$(current-build-folder)))
	$(if $(verbose),@echo delete .... $(patsubst source/%,release/%,$(current-build-folder))/makefile)
	@npx shx rm -f $(patsubst source/%,release/%,$(current-build-folder))/makefile

ignore::
	$(if $(verbose),@echo ignore .... $(current-build-folder))
	@npx shx rm -Rf $(patsubst source/%,release/%,$(current-build-folder))

endif
endif