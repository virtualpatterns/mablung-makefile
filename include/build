
makefile-path := $(realpath $(firstword $(MAKEFILE_LIST)))
binary-path := $(project-path)/node_modules/.bin

shx := $(binary-path)/shx
eslint := $(binary-path)/eslint
babel := $(binary-path)/babel

get-content = $(strip $\
								$(filter-out $\
									$(1)/. $\
									$(1)/..,$\
									$(patsubst $\
										./%,$\
										%,$\
										$(wildcard $(1)/.*) $\
										$(wildcard $(1)/*))))

trim-project-path = $(patsubst $\
											$(project-path)/%,$\
											%,$\
											$(1))

trim-folder-path = $(patsubst $\
										%/,$\
										%,$\
										$(dir $\
											$(1)))

ifeq ($(CURDIR),$(project-path))

.PHONY: build

# @$(shx) echo build ..... source
build: $(project-path)/release.create
	@$(MAKE) --directory=$(project-path)/source --jobs --makefile=$(makefile-path) --no-print-directory build

$(project-path)/release.create:
	@npx shx mkdir -p $(patsubst %.create,%,$@)

else

ifndef filter-make-folder
filter-make-folder = $(1)
endif

make-folder := $(call $\
								filter-make-folder,$\
								$(foreach $\
									path,$\
									$(call get-content,$(CURDIR)),$\
									$(if $\
										$(call get-content,$(path)),$\
										$(if $\
											$(wildcard $(path)/makefile),$\
											$(path).make))))

ifndef filter-build-folder
filter-build-folder = $(1)
endif

build-folder := $(call $\
									filter-build-folder,$\
									$(foreach $\
										path,$\
										$(call get-content,$(CURDIR)),$\
										$(if $\
											$(call get-content,$(path)),$\
											$(if $\
												$(wildcard $(path)/makefile),,$\
												$(path).build),)))

ifndef filter-build-file
filter-build-file = $(1)
endif

build-file := $(call $\
								filter-build-file,$\
								$(foreach $\
									path,$\
									$(call get-content,$(CURDIR)),$\
									$(subst $\
										/source/,$\
										/release/,$\
										$(if $\
											$(call get-content,$(path)),,$\
											$(path)))))

.PHONY: build copy ignore

# $(info --------------------)
# $(info make-folder = $(call trim-project-path,$(make-folder)))
# $(info build-folder = $(call trim-project-path,$(build-folder)))
# $(info build-file = $(call trim-project-path,$(build-file)))
# $(info --------------------)

build: $(make-folder) $(build-folder) $(build-file)
	@$(shx) echo -n

# @$(shx) echo make ...... $(call trim-project-path,$(patsubst %.make,%,$@))
$(project-path)/source/%.make:
	@$(MAKE) --directory=$(patsubst %.make,%,$@) --no-print-directory

# @$(shx) echo build ..... $(call trim-project-path,$(patsubst %.build,%,$@))
$(project-path)/source/%.build: $(project-path)/release/%.create
	@$(MAKE) --directory=$(patsubst %.build,%,$@) --makefile=$(makefile-path) --no-print-directory build

# @$(shx) echo create .... $(call trim-project-path,$(patsubst %.create,%,$@))
$(project-path)/release/%.create:
	@$(shx) mkdir -p $(patsubst %.create,%,$@)

# @$(shx) echo ignore .... $(call trim-project-path,$<) for $(call trim-project-path,$(call trim-folder-path,$@))
$(project-path)/release/.DS_Store: $(project-path)/source/.DS_Store;
$(project-path)/release/%/.DS_Store: $(project-path)/source/%/.DS_Store;

$(project-path)/release/.babelrc.json: $(project-path)/source/.babelrc.json;
$(project-path)/release/%/.babelrc.json: $(project-path)/source/%/.babelrc.json;

$(project-path)/release/.eslintrc.json: $(project-path)/source/.eslintrc.json;
$(project-path)/release/%/.eslintrc.json: $(project-path)/source/%/.eslintrc.json;

# @$(shx) echo check ........ $(call trim-project-path,$<) $(eslint-parameter)
# @$(shx) echo compile ... $(call trim-project-path,$<) to $(call trim-project-path,$@) --source-maps $(or $(source-map),true) $(babel-parameter)
$(project-path)/release/%.cjs: $(project-path)/source/%.cjs
	@$(shx) echo compile ... $(call trim-project-path,$@) --source-maps $(or $(source-map),true) $(babel-parameter)
	@$(eslint) $< $(eslint-parameter)
	@$(babel) $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

# @$(shx) echo check ........ $(call trim-project-path,$<) $(eslint-parameter)
# @$(shx) echo compile ... $(call trim-project-path,$<) to $(call trim-project-path,$@) --source-maps $(or $(source-map),true) $(babel-parameter)
$(project-path)/release/%.js: $(project-path)/source/%.js
	@$(shx) echo compile ... $(call trim-project-path,$@) --source-maps $(or $(source-map),true) $(babel-parameter)
	@$(eslint) $< $(eslint-parameter)
	@$(babel) $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

# @$(shx) echo copy ...... $(call trim-project-path,$<) to $(call trim-project-path,$(call trim-folder-path,$@))
$(project-path)/release/%: $(project-path)/source/%
	@$(shx) echo copy ...... $(call trim-project-path,$@)
	@$(shx) cp -R $< $(call trim-folder-path,$@)

# @$(shx) echo copy ...... $(call trim-project-path,$(CURDIR)) to $(call trim-project-path,$(call trim-folder-path,$(subst /source/,/release/,$(CURDIR))))
# @$(shx) echo delete .... $(call trim-project-path,$(subst /source/,/release/,$(CURDIR))/makefile)
copy::
	@$(shx) cp -R $(CURDIR) $(call trim-folder-path,$(subst /source/,/release/,$(CURDIR)))
	@$(shx) rm -f $(subst /source/,/release/,$(CURDIR))/makefile

# @$(shx) echo ignore .... $(call trim-project-path,$(CURDIR))
ignore::
	@$(shx) echo -n 

endif