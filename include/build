
makefile-path := $(realpath $(firstword $(MAKEFILE_LIST)))
binary-path := $(project-path)/node_modules/.bin

shx := $(binary-path)/shx
eslint := $(binary-path)/eslint
babel := $(binary-path)/babel

content-of = $(strip $\
							$(filter-out $\
								$(1)/. $\
								$(1)/..,$\
								$(patsubst $\
									./%,$\
									%,$\
									$(wildcard $(1)/.*) $\
									$(wildcard $(1)/*))))

trim-project = $(patsubst $\
								$(project-path)/%,$\
								%,$\
								$(1))

trim-folder-path = $(patsubst $\
										%/,$\
										%,$\
										$(dir $\
											$(1)))

ifeq ($(CURDIR),$(project-path))

.PHONY: build

# @$(shx) echo build ..... source
build: $(project-path)/release.create
	@$(MAKE) --directory=$(project-path)/source --jobs --makefile=$(makefile-path) --no-print-directory build

# @$(shx) echo create .... $(call trim-project,$(patsubst %.create,%,$@))
$(project-path)/release.create:
	@$(shx) mkdir -p $(patsubst %.create,%,$@)

else

ifndef filter-build-content
filter-build-content = $(1)
endif

build-content := $(call $\
									filter-build-content,$\
									$(foreach $\
										path,$\
										$(call content-of,$(CURDIR)),$\
										$(if $\
											$(call content-of,$(path)),$\
											$(if $\
												$(wildcard $(path)/makefile),$\
												$(path).make,$\
												$(path).build),)))

ifndef filter-release-content
filter-release-content = $(1)
endif

release-content := $(call $\
										filter-release-content,$\
										$(foreach $\
											path,$\
											$(call content-of,$(CURDIR)),$\
											$(subst $\
												/source/,$\
												/release/,$\
												$(if $\
													$(call content-of,$(path)),,$\
													$(path)))))

.PHONY: build copy ignore

# $(info --------------------)
# $(info build-content = $(call trim-project,$(build-content)))
# $(info release-content = $(call trim-project,$(release-content)))
# $(info --------------------)

build: $(build-content) $(release-content)
	@$(shx) echo -n

# @$(shx) echo make ...... $(call trim-project,$(patsubst %.make,%,$@))
$(project-path)/source/%.make:
	@$(MAKE) --directory=$(patsubst %.make,%,$@) --no-print-directory

# @$(shx) echo build ..... $(call trim-project,$(patsubst %.build,%,$@))
$(project-path)/source/%.build: $(project-path)/release/%.create
	@$(MAKE) --directory=$(patsubst %.build,%,$@) --makefile=$(makefile-path) --no-print-directory build

# @$(shx) echo create .... $(call trim-project,$(patsubst %.create,%,$@))
$(project-path)/release/%.create:
	@$(shx) mkdir -p $(patsubst %.create,%,$@)

# @$(shx) echo ignore .... $(call trim-project,$<) to $(call trim-project,$@)
$(project-path)/release%DS_Store: $(project-path)/source%DS_Store;
# @$(shx) echo ignore .... $(call trim-project,$<) to $(call trim-project,$@)
$(project-path)/release%babelrc.json: $(project-path)/source%babelrc.json;
# @$(shx) echo ignore .... $(call trim-project,$<) to $(call trim-project,$@)
$(project-path)/release%eslintrc.json: $(project-path)/source%eslintrc.json;

$(project-path)/release/%.cjs: $(project-path)/source/%.cjs
	@$(shx) echo check ..... $(call trim-project,$<) $(eslint-parameter)
	@$(eslint) $< $(eslint-parameter)
	@$(shx) echo compile ... $(call trim-project,$<) to $(call trim-project,$@) --source-maps $(or $(source-map),true) $(babel-parameter)
	@$(babel) $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

$(project-path)/release/%.js: $(project-path)/source/%.js
	@$(shx) echo check ..... $(call trim-project,$<) $(eslint-parameter)
	@$(eslint) $< $(eslint-parameter)
	@$(shx) echo compile ... $(call trim-project,$<) to $(call trim-project,$@) --source-maps $(or $(source-map),true) $(babel-parameter)
	@$(babel) $< --out-file $@ --source-maps $(or $(source-map),true) $(babel-parameter)

$(project-path)/release/%: $(project-path)/source/%
	@$(shx) echo copy ...... $(call trim-project,$<) to $(call trim-project,$(call trim-folder-path,$@))
	@$(shx) cp -R $< $(call trim-folder-path,$@)

# @$(shx) echo copy ...... $(call trim-project,$(CURDIR)) to $(call trim-project,$(call trim-folder-path,$(subst /source/,/release/,$(CURDIR))))
# @$(shx) echo delete .... $(call trim-project,$(subst /source/,/release/,$(CURDIR))/makefile)
copy::
	@$(shx) cp -R $(CURDIR) $(call trim-folder-path,$(subst /source/,/release/,$(CURDIR)))
	@$(shx) rm -f $(subst /source/,/release/,$(CURDIR))/makefile

# @$(shx) echo ignore .... $(call trim-project,$(CURDIR))
ignore::
	@$(shx) echo -n 

endif