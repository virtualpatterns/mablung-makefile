
mablung-makefile-include-build-path := $(call trimFolderPath,$(realpath $(lastword $(MAKEFILE_LIST))))
# $(info mablung-makefile-include-build-path := $(mablung-makefile-include-build-path))

ifeq ($(CURDIR),$(projectPath))

.PHONY: build

build: $(projectPath)/release.create
	@$(shx) echo build ..... source
	@$(MAKE) --directory=$(projectPath)/source --jobs --makefile=$(makefilePath) --no-print-directory build

$(projectPath)/release.create:
	@$(shx) echo create .... $(call trimProject,$(patsubst %.create,%,$@))
	@$(shx) mkdir -p $(patsubst %.create,%,$@)

else

ifndef filterBuildContent
filterBuildContent = $(1)
endif

buildContent := $(call $\
									filterBuildContent,$\
									$(foreach $\
										path,$\
										$(call contentOf,$(CURDIR)),$\
										$(if $\
											$(call contentOf,$(path)),$\
											$(if $\
												$(wildcard $(path)/makefile),$\
												$(path).make,$\
												$(path).build),)))

ifndef filterReleaseContent
filterReleaseContent = $(1)
endif

releaseContent := $(call $\
									filterReleaseContent,$\
									$(foreach $\
										path,$\
										$(call contentOf,$(CURDIR)),$\
										$(subst $\
											/source/,$\
											/release/,$\
											$(if $\
												$(call contentOf,$(path)),,$\
												$(path)))))

.PHONY: build copy ignore

# $(info --------------------)
# $(info buildContent = $(call trimProject,$(buildContent)))
# $(info releaseContent = $(call trimProject,$(releaseContent)))
# $(info --------------------)

build: $(buildContent) $(releaseContent)
	@$(shx) echo -n

$(projectPath)/source/%.make:
	@$(shx) echo make ...... $(call trimProject,$(patsubst %.make,%,$@))
	@$(MAKE) --directory=$(patsubst %.make,%,$@) --no-print-directory

$(projectPath)/source/%.build: $(projectPath)/release/%.create
	@$(shx) echo build ..... $(call trimProject,$(patsubst %.build,%,$@))
	@$(MAKE) --directory=$(patsubst %.build,%,$@) --makefile=$(makefilePath) --no-print-directory build

# $(info -- $$(projectPath)/release/%.create: in $(call trimProject,$(mablung-makefile-include-build-path)/build))
$(projectPath)/release/%.create:
	@$(shx) echo create .... $(call trimProject,$(patsubst %.create,%,$@))
	@$(shx) mkdir -p $(patsubst %.create,%,$@)

$(projectPath)/release%DS_Store: $(projectPath)/source%DS_Store
	@$(shx) echo ignore .... $(call trimProject,$<) to $(call trimProject,$@)
$(projectPath)/release%babelrc.json: $(projectPath)/source%babelrc.json
	@$(shx) echo ignore .... $(call trimProject,$<) to $(call trimProject,$@)
$(projectPath)/release%eslintrc.json: $(projectPath)/source%eslintrc.json
	@$(shx) echo ignore .... $(call trimProject,$<) to $(call trimProject,$@)

$(projectPath)/release/%.cjs: eslintFlag := --fix
$(projectPath)/release/%.cjs: babelFlag := --source-maps
$(projectPath)/release/%.cjs: $(projectPath)/source/%.cjs
	@$(shx) echo compile ... $(call trimProject,$<) to $(call trimProject,$@)
	@$(eslint) $< $(eslintFlag)
	@$(babel) $< --out-file $@ $(babelFlag)

$(projectPath)/release/%.js: eslintFlag := --fix
$(projectPath)/release/%.js: babelFlag := --source-maps
$(projectPath)/release/%.js: $(projectPath)/source/%.js
	@$(shx) echo compile ... $(call trimProject,$<) to $(call trimProject,$@)
	@$(eslint) $< $(eslintFlag)
	@$(babel) $< --out-file $@ $(babelFlag)

$(projectPath)/release/%: $(projectPath)/source/%
	@$(shx) echo copy ...... $(call trimProject,$<) to $(call trimProject,$(call trimFolderPath,$@))
	@$(shx) cp -R $< $(call trimFolderPath,$@)

# $(projectPath)/release/%: $(projectPath)/source/%
# 	$(if $\
# 		$(call contentOf,$<),$\
# 		@$(shx) echo create .... $(call trimProject,$@),$\
# 		@$(shx) echo copy ...... $(call trimProject,$<) to $(call trimProject,$(call trimFolderPath,$@)))
# 	$(if $\
# 		$(call contentOf,$<),$\
# 		@$(shx) mkdir -p $@,$\
# 		@$(shx) cp -R $< $(call trimFolderPath,$@))

copy::
	@$(shx) echo copy ...... $(call trimProject,$(CURDIR)) to $(call trimProject,$(call trimFolderPath,$(subst /source/,/release/,$(CURDIR))))
	@$(shx) cp -R $(CURDIR) $(call trimFolderPath,$(subst /source/,/release/,$(CURDIR)))
	@$(shx) echo delete .... $(call trimProject,$(subst /source/,/release/,$(CURDIR))/makefile)
	@$(shx) rm -f $(subst /source/,/release/,$(CURDIR))/makefile

ignore::
	@$(shx) echo ignore .... $(call trimProject,$(CURDIR))

# # @$(shx) echo -n 

endif
