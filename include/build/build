
build: build-all

build-all:
	@$(MAKE) --directory=source --makefile=$(firstword $(realpath $(MAKEFILE_LIST))) --jobs --no-print-directory build-folder

ifneq ($(CURDIR),$(projectPath))

sourcePath := $(CURDIR)
sourceContent := $(call contentOf,$(sourcePath))

ifndef filterReleaseContent
filterReleaseContent = $(1)
endif

releaseContent := $(call $\
										filterReleaseContent,$\
										$(foreach $\
											path,$\
											$(sourceContent),$\
											$(subst $\
												/source/,$\
												/release/,$\
												$(if $\
													$(call contentOf,$(path)),$\
													$(if $\
														$(wildcard $(path)/makefile),$\
														$(path).make-folder,$\
														$(path).build-folder),$\
													$(path)))))

# $(info --------------------)
# $(info sourcePath = $(patsubst $(projectPath)/%,%,$(sourcePath)))
# $(info sourceContent = $(patsubst $(projectPath)/%,%,$(sourceContent)))
# $(info releaseContent = $(patsubst $(projectPath)/%,%,$(releaseContent)))
# $(info --------------------)

$(projectPath)/release/%.make-folder: $(projectPath)/source/%
	@$(MAKE) --directory=$< --no-print-directory

# @$(shx) echo make ..... $(patsubst $(projectPath)/%,%,$<)

$(projectPath)/release/%.build-folder: $(projectPath)/source/%
	@$(MAKE) --directory=$< --makefile=$(firstword $(realpath $(MAKEFILE_LIST))) --no-print-directory build-folder

# @$(shx) echo build .... $(patsubst $(projectPath)/%,%,$<)

$(projectPath)/release/%.cjs: eslintFlag := --fix
$(projectPath)/release/%.cjs: babelFlag := --source-maps
$(projectPath)/release/%.cjs: $(projectPath)/source/%.cjs
	@$(shx) echo create ... $(patsubst $(projectPath)/%,%,$@)
	@$(eslint) $< $(eslintFlag)
	@$(babel) $< --out-file $@ $(babelFlag)

$(projectPath)/release/%.js: eslintFlag := --fix
$(projectPath)/release/%.js: babelFlag := --source-maps
$(projectPath)/release/%.js: $(projectPath)/source/%.js
	@$(shx) echo create ... $(patsubst $(projectPath)/%,%,$@)
	@$(eslint) $< $(eslintFlag)
	@$(babel) $< --out-file $@ $(babelFlag)

$(projectPath)/release/.DS_Store: ;
$(projectPath)/release/%/.DS_Store: ;

$(projectPath)/release/.babelrc.json: ;
$(projectPath)/release/%/.babelrc.json: ;

$(projectPath)/release/.eslintrc.json: ;
$(projectPath)/release/%/.eslintrc.json: ;

$(projectPath)/release/%: $(projectPath)/source/%
	@$(shx) echo copy ..... $(patsubst $(projectPath)/%,%,$<)
	@$(shx) cp -R $< $(patsubst %/,%,$(dir $@))

build-folder: pre-build-folder $(releaseContent)
	@$(shx) echo -n 

pre-build-folder:: releasePath := $(subst /source,/release,$(sourcePath))
pre-build-folder::
	@$(shx) mkdir -p $(firstword $(releasePath))

# $(info IN mablung-makefile/include/build/build)
# @$(shx) echo create ... $(patsubst $(projectPath)/%,%,$(firstword $(releasePath)))

copy-folder:: releasePath := $(subst /source/,/release/,$(sourcePath))
copy-folder::
	@$(shx) echo copy ..... $(patsubst $(projectPath)/%,%,$(subst /release/,/source/,$(firstword $(releasePath))))
	@$(shx) cp -R $(sourcePath) $(patsubst %/,%,$(dir $(firstword $(releasePath))))
	@$(shx) rm -f $(firstword $(releasePath))/makefile

# @$(shx) echo delete ... $(patsubst $(projectPath)/%,%,$(firstword $(releasePath))/makefile)

ignore-folder::
	@$(shx) echo -n 

# @$(shx) echo ignore ... $(patsubst $(projectPath)/%,%,$(sourcePath))

endif
