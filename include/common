		
dirty-item = $(strip $\
							$(patsubst $\
								%/,$\
								%,$\
								$(shell git status --porcelain | awk '{print $$2}')))				

$(info --------------------)
$(info dirty-item = >$(dirty-item)<)
$(info --------------------)

ifndef current-folder

.PHONY: version install re-install clean run cover test pre-release set-version release

version::
	$(if $\
		$(shell npx shx which mablung-makefile),$\
		@npx mablung-makefile get-version,$\
		@$(MAKE) run argument="release/command/mablung-makefile.js get-version")

install::
	@npm install

re-install::
	@rm -Rf node_modules package-lock.json
	@npm install

clean::
	@npx shx rm -Rf coverage process release

run:: build
	$(eval export MAKEFILE_PATH := $(realpath $(MAKEFILE_LIST)))
	@node --no-warnings --unhandled-rejections=strict $(or $(argument),$(arg),$(a))

cover:: project-name := $(notdir $(CURDIR))
cover:: build
	$(eval export MAKEFILE_PATH := $(realpath $(MAKEFILE_LIST)))
	@npx shx rm -Rf coverage process
	@npx c8 ava $(or $(argument),$(arg),$(a))
	@npx shx mkdir -p ../Shared/$(project-name)
	@npx shx rm -Rf ../Shared/$(project-name)/coverage
	@npx shx mv coverage ../Shared/$(project-name)

test:: build
	$(eval export MAKEFILE_PATH := $(realpath $(MAKEFILE_LIST)))
	@npx shx rm -Rf process
	@npx ava $(or $(argument),$(arg),$(a))

ifeq ($(dirty-item),)
pre-release::
	@npm version prerelease
	@$(MAKE) clean cover source-map=true
else
pre-release::
	$(error Git working directory not clean.)
endif

ifeq ($(dirty-item),)
release::
	@npm version $(or $(version),patch)
	@$(MAKE) clean test source-map=false
	@npm publish --access public
	@git push origin master
else
release::
	$(error Git working directory not clean.)
endif

endif
