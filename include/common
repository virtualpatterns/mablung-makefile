
ifneq ($(verbose),true)
override verbose =
endif

ifndef project-name
export project-name = $(notdir $(CURDIR))
endif

get-content = $(strip $\
								$(filter-out $\
									$(1)/. $\
									$(1)/..,$\
									$(patsubst $\
										./%,$\
										%,$\
										$(wildcard $(1)/.*) $\
										$(wildcard $(1)/*))))

trim-folder-path = $(patsubst $\
										%/,$\
										%,$\
										$(dir $\
											$(1)))

ifndef current-build-folder

# --------------------
.PHONY: commit pre-commit
# --------------------

dirty-item = $(strip $\
							$(shell git status --porcelain | awk '{print $$2}'))

commit-item = $(filter $\
								$(or $(include-commit-item),%),$\
								$(dirty-item))

ifneq ($(commit-item),)

ifneq ($(message),)

commit:: pre-commit $(addsuffix .add,$(commit-item))
	@git commit --message="$(message)"

%.add:
	@git add $(patsubst %.add,%,$@)

else

commit::
	$(info A message must be specified (e.g. message="make tests"))
	$(error Error)

endif

pre-commit::
	$(info - commit -------------------------------)
	$(info The following items will be committed ... $(commit-item))
	$(info ----------------------------------------)
	@:

else

commit::
	$(info Git working directory clean.)
	@:

pre-commit::
	$(info Git working directory clean.)
	@:

endif

# --------------------
.PHONY: install pre-install re-install pre-re-install
# --------------------

install:: pre-install
	$(info - install ------------------------------)
	@npm install

pre-install:: ;

re-install:: pre-re-install
	$(info - re-install ---------------------------)
	@rm -Rf node_modules package-lock.json
	@npm install

pre-re-install:: ;

# --------------------
.PHONY: update pre-update update-0 update-1
# --------------------

update:: update-0
	@:

update-0:
	$(info - update -------------------------------)
	@npx ncu
	@$(MAKE) --no-print-directory update-1

ifneq ($(filter package.json,$(dirty-item)),)

update-1:
	@$(MAKE) --no-print-directory re-install

else

update-1:
	@:

endif

# --------------------
.PHONY: version pre-version
# --------------------

ifeq ($(project-name),mablung-makefile)

version:: pre-version
	@$(MAKE) --no-print-directory run argument="release/command/index.js get-version"

else

version:: pre-version
	@npx mablung-makefile get-version

endif

pre-version:: ;

# # --------------------
# .PHONY: clean pre-clean
# # --------------------

# clean:: pre-clean
# 	$(info - clean --------------------------------)
# 	@npx shx rm -Rf data release

# pre-clean:: ;

# --------------------
.PHONY: run pre-run
# --------------------

get-argument = $(strip $\
								$(foreach $\
									item,$\
									$(MAKECMDGOALS),$\
									$(if $\
										$(or $(find-argument-$(1)),$(findstring $(1),$(item))),$\
										$(if $\
											$(find-argument-$(1)),$\
											$(item)$\
											$(eval $(item):;@:),$\
											$(eval find-argument-$(1) = $(item))))))

run-argument := $(call get-argument,run)

ifneq ($(or $(argument),$(run-argument)),)

run:: pre-run build
	$(info - run ----------------------------------)
	$(eval export MAKE_PATH = $(MAKE))
	$(eval export MAKEFILE_PATH = $(realpath $(MAKEFILE_LIST)))
	$(if $(dirty-item),\
		$(eval export GIT_IS_DIRTY = true),\
		$(eval export GIT_IS_DIRTY = false))
	@node $(node-parameter) $(or $(argument),$(run-argument))

pre-run::

else

run::
	$(info An argument must be specified (e.g. make run release/sandbox/index.js or make run argument=release/sandbox/index.js))
	$(error Error)

endif

# --------------------
.PHONY: cover pre-cover test pre-test
# --------------------

cover:: cover-argument := $(call get-argument,cover)
cover:: pre-cover build
	$(info - cover --------------------------------)
	$(eval export MAKE_PATH = $(MAKE))
	$(eval export MAKEFILE_PATH = $(realpath $(MAKEFILE_LIST)))
	$(if $(dirty-item),\
		$(eval export GIT_IS_DIRTY = true),\
		$(eval export GIT_IS_DIRTY = false))
	@npx shx rm -Rf coverage data/coverage
	@npx c8 ava $(or $(argument),$(cover-argument))
	@npx shx mkdir -p ../Shared/$(project-name)
	@npx shx rm -Rf ../Shared/$(project-name)/coverage
	@npx shx mv coverage ../Shared/$(project-name)

pre-cover:: ;

test:: test-argument := $(call get-argument,test)
test:: pre-test build
	$(info - test ---------------------------------)
	$(eval export MAKE_PATH = $(MAKE))
	$(eval export MAKEFILE_PATH = $(realpath $(MAKEFILE_LIST)))
	$(if $(dirty-item),\
		$(eval export GIT_IS_DIRTY = true),\
		$(eval export GIT_IS_DIRTY = false))
	@npx ava $(or $(argument),$(test-argument))

pre-test:: ;

# --------------------
.PHONY: release pre-release pre-pre-release
# --------------------

ifeq ($(dirty-item),)

ifneq ($(version),)

release:: pre-release
	$(info - release ------------------------------)
	@npm version $(version)
	@$(MAKE) --no-print-directory clean test source-map=false
	@npm publish --access public
	@git push origin master

else

release::
	$(info A version must be specified (e.g. version=prerelease, version=patch, or version=1.0.0))
	$(error Error)

endif

pre-release:: pre-pre-release update
	$(info - pre-release --------------------------)
	@npm version prerelease
	@$(MAKE) --no-print-directory clean cover source-map=true
	@git push origin master

pre-pre-release:: ;

else

release::
	$(info Git working directory not clean ... $(dirty-item))
	$(error Error)

pre-release::
	$(info Git working directory not clean ... $(dirty-item))
	$(error Error)

endif

endif
