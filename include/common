
ifneq ($(verbose),true)
override verbose :=
endif

ifndef current-folder

dirty-item = $(strip $\
							$(patsubst $\
								%/,$\
								%,$\
								$(shell git status --porcelain | awk '{print $$2}')))

# $(info --------------------)
# $(info dirty-item = $(dirty-item))
# $(info --------------------)

# --------------------
.PHONY: commit pre-commit
# --------------------

ifneq ($(dirty-item),)

ifneq ($(or $(message),$(m)),)

commit:: pre-commit $(addsuffix .add,$(dirty-item))
	$(if $(verbose),@echo commit .... $(dirty-item))
	@git commit --message="$(or $(message),$(m))"

pre-commit:: ;

%.add:
	$(if $(verbose),@echo add ....... $(patsubst %.add,%,$@))
	@git add $(patsubst %.add,%,$@)

else

commit::
	$(info A message must be specified (e.g. message="make tests"))
	@npx shx false

endif

else

commit::
	$(info Git working directory clean.)
	@npx shx true

endif

# --------------------
.PHONY: install pre-install re-install pre-re-install
# --------------------

install:: pre-install
	@npm install

pre-install:: ;

re-install:: pre-re-install
	@rm -Rf node_modules package-lock.json
	@npm install

pre-re-install:: ;

# --------------------
.PHONY: update pre-update update-0 update-1
# --------------------

update:: pre-update update-0
	@npx shx true

pre-update:: ;

update-0:
	@npx npm-check-updates --upgrade
	@$(MAKE) update-1

ifneq ($(filter package.json,$(dirty-item)),)

update-1:
	@$(MAKE) re-install

else

update-1:
	@npx shx true

endif

# --------------------
.PHONY: version pre-version
# --------------------

version:: pre-version
	$(if $\
		$(shell npx shx which mablung-makefile),$\
		@npx mablung-makefile get-version,$\
		@$(MAKE) run argument="release/command/mablung-makefile.js get-version")

pre-version:: ;

# --------------------
.PHONY: clean pre-clean
# --------------------

clean:: pre-clean
	@npx shx rm -Rf coverage process release

pre-clean:: ;

# --------------------
.PHONY: run pre-run
# --------------------

ifneq ($(or $(argument),$(a)),)

run:: pre-run build
	$(eval export MAKEFILE_PATH := $(realpath $(MAKEFILE_LIST)))
	@node --no-warnings --unhandled-rejections=strict $(or $(argument),$(a))

pre-run:: ;

else

run::
	$(info An argument must be specified (e.g. argument=release/sandbox/index.js))
	@npx shx false

endif

# --------------------
.PHONY: cover pre-cover test pre-test
# --------------------

cover:: pre-cover build
	$(eval export MAKEFILE_PATH := $(realpath $(MAKEFILE_LIST)))
	$(eval project-name := $(notdir $(CURDIR)))
	@npx shx rm -Rf coverage process
	@npx c8 --config configuration/c8.json ava $(or $(argument),$(a))
	@npx shx mkdir -p ../Shared/$(project-name)
	@npx shx rm -Rf ../Shared/$(project-name)/coverage
	@npx shx mv coverage ../Shared/$(project-name)

pre-cover:: ;

test:: pre-test build
	$(eval export MAKEFILE_PATH := $(realpath $(MAKEFILE_LIST)))
	@npx shx rm -Rf process
	@npx ava $(or $(argument),$(a))

pre-test:: ;

# --------------------
.PHONY: release pre-release pre-pre-release
# --------------------

ifeq ($(dirty-item),)

ifneq ($(or $(version),$(v)),)

release:: pre-release
	@npm version $(or $(version),$(v))
	@$(MAKE) clean test source-map=false
	@npm publish --access public
	@git push origin master

else

release::
	$(info A version must be specified (e.g. version=prerelease, version=patch, or version=1.0.0))
	@npx shx false

endif

pre-release:: pre-pre-release update
	@npm version prerelease
	@$(MAKE) clean cover source-map=true

pre-pre-release:: ;

else

release::
	$(info Git working directory not clean ... $(dirty-item))
	@npx shx false

pre-release::
	$(info Git working directory not clean ... $(dirty-item))
	@npx shx false

endif

endif
